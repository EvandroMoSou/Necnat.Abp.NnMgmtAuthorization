@page "/NnMgmtAuthorization/Configuration/HierarchicalStructure"
@using Blazorise
@using Blazorise.TreeView
@using CurrieTechnologies.Razor.SweetAlert2
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Localization
@using Necnat.Abp.NnLibCommon.Blazor.Components
@using Necnat.Abp.NnLibCommon.Localization
@using Necnat.Abp.NnMgmtAuthorization.Blazor.Components
@using Necnat.Abp.NnMgmtAuthorization.Domains
@using Necnat.Abp.NnMgmtAuthorization.HierarchicalPermissions
@using Necnat.Abp.NnMgmtAuthorization.Localization
@using Necnat.Abp.NnMgmtAuthorization.Models
@using Necnat.Abp.NnMgmtAuthorization.Permissions
@using Volo.Abp.Application.Dtos
@using Volo.Abp.AspNetCore.Components
@using Volo.Abp.AspNetCore.Mvc.ApplicationConfigurations.ClientProxies
@attribute [Authorize(NnMgmtAuthorizationPermissions.PrmHierarchicalStructure.Default)]
@inject IStringLocalizer<NnLibCommonResource> NL
@inject IHierarchicalAuthorizationService HierarchicalAuthorizationService
@inject IHierarchicalStructureAppService AppService
@inject IHierarchyAppService HierarchyAppService
@inject SweetAlertService Swal
@inherits AbpComponentBase

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Hierarchical Structures"]</h2>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <Fields>
            <Field ColumnSize="ColumnSize.Is12.OnDesktop">
                <FieldLabel>@L["Hierarchy"]</FieldLabel>
                <HierarchySelectList @ref="@_hierarchySelectListRef" @bind-SelectedEntityDto="@SelectedHierarchy" Data="_lHierarchy" IsAutoSelectFirst="true" />
            </Field>
        </Fields>
        <hr />
        @if (_lHierarchicalStructureNode != null && _lHierarchicalStructureNode.Count > 0)
        {
            @foreach (var iHierarchicalStructureNode in _lHierarchicalStructureNode)
            {
                <HierarchicalStructureNodeInline HierarchicalStructureNode="iHierarchicalStructureNode"
                                                 HierarchyComponentTypeList="_lHierarchyComponentType"
                                                 SearchHierarchicalStructureNodeAsyncMethod="SearchHierarchicalStructureNodeAsync"
                                                 OpenCreateModalAsyncMethod="OpenCreateModalAsync"
                                                 DeleteAsyncMethod="DeleteAsync" />
            }
        }
        else
        {
            <Span Class="ps-1">@L["This hierarchy has no components."]</Span>
            <Icon Class="ps-1" Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.PlusCircle" Clicked="@(async () => await OpenCreateModalAsync(null))" />
        }
    </CardBody>
</Card>

<Modal @ref="@CreateModal">
    <ModalContent Size="ModalSize.ExtraLarge" Centered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@NL["Add"] @L["Hierarchy Component"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Mode="ValidationMode.Manual" ValidateOnLoad="false">
                    <Fields>
                        <Validation Validator="@ValidateHierarchyComponent">
                            <HierarchyComponentSelectList @ref="@hierarchyComponentSelectListRef" @bind-SelectedHierarchyComponent="hierarchyComponent" ListaHierarchyComponentType="_lHierarchyComponentType" ListaHierarchyComponent="_lHierarchyComponent" />
                        </Validation>
                    </Fields>
                    <Blazorise.ValidationSummary />
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">
                    @NL["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">
                    @NL["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>


@namespace Necnat.Abp.NnMgmtAuthorization.Blazor.Pages
@code {

    HierarchySelectList? _hierarchySelectListRef;

    List<HierarchyDto> _lHierarchy = new List<HierarchyDto>();
    List<HierarchyComponentModel> _lHierarchyComponent = new List<HierarchyComponentModel>();
    List<HierarchyComponentTypeModel> _lHierarchyComponentType = new List<HierarchyComponentTypeModel>();
    List<HierarchicalStructureNode> _lHierarchicalStructureNode = new List<HierarchicalStructureNode>();
    HierarchicalStructureNode? _selectedHierarchicalStructureNode;

    HierarchyDto? _selectedHierarchy;
    HierarchyDto? SelectedHierarchy
    {
        get => _selectedHierarchy;
        set
        {
            if (_selectedHierarchy == value)
                return;

            _selectedHierarchy = value;
            InvokeAsync(SelectedHierarchyIdChanged);
        }
    }
    protected async Task SelectedHierarchyIdChanged()
    {
        if (_selectedHierarchy == null)
        {
            _lHierarchicalStructureNode = new List<HierarchicalStructureNode>();
            _lHierarchyComponent = new List<HierarchyComponentModel>();
            _lHierarchyComponentType = new List<HierarchyComponentTypeModel>();
        }
        else
        {
            _lHierarchyComponent = await AppService.GetListHierarchyComponentAsync(_selectedHierarchy.Id);
            _lHierarchyComponentType = await AppService.GetListHierarchyComponentTypeAsync(_selectedHierarchy.Id);
            _lHierarchicalStructureNode = await SearchHierarchicalStructureNodeAsync(null);
        }

        await InvokeAsync(StateHasChanged);
    }

    public HierarchicalStructureCd()
    {
        LocalizationResource = typeof(NnMgmtAuthorizationResource);
    }

    protected override async Task OnInitializedAsync()
    {
        var lHierarchy = await HierarchicalAuthorizationService.GetListHierarchyComponentAsync(NnMgmtAuthorizationPermissions.PrmHierarchicalStructure.Default, 1);
        _lHierarchy = (await HierarchyAppService.GetListAsync(new HierarchyResultRequestDto { IsPaged = false, IdList = lHierarchy.Select(x => x.Id).ToList() })).Items.ToList();
    }

    private async Task<List<HierarchicalStructureNode>> SearchHierarchicalStructureNodeAsync(HierarchicalStructureNode? hierarchicalStructureNode)
    {
        var l = await AppService.GetListHierarchicalStructureNodeAsync(new SearchHierarchicalStructureNodeResultRequestDto { HierarchyId = SelectedHierarchy!.Id, HierarchicalStructureIdParent = hierarchicalStructureNode?.HierarchicalStructure.Id });
        foreach (var iE in l)
            iE.HierarchicalStructure.HierarchyComponentName = _lHierarchyComponent!.Where(x => x.Id == iE.HierarchicalStructure.HierarchyComponentId).First()?.Name;

        return l.OrderBy(x => x.HierarchicalStructure.HierarchyComponentName).ToList();
    }

    public async Task DeleteAsync(HierarchicalStructureNode hierarchicalStructureNode)
    {
        var result = await Swal!.FireAsync(new SweetAlertOptions
            {
                Title = L["Are you sure?"],
                Text = L["Are you sure you want to delete this record and all of its children?"],
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = L["Yes, delete it."],
                CancelButtonText = L["No, cancel."]
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            try
            {
                await AuthorizationService.CheckAsync(NnMgmtAuthorizationPermissions.PrmHierarchicalStructure.Delete);
                await AppService.DeleteAsync(hierarchicalStructureNode.HierarchicalStructure.Id);

                RemoveNode(_lHierarchicalStructureNode, hierarchicalStructureNode.HierarchicalStructure.Id);
                if (hierarchicalStructureNode.HierarchicalStructure.HierarchicalStructureIdParent != null)
                {
                    var parent = SearchNode(_lHierarchicalStructureNode, hierarchicalStructureNode.HierarchicalStructure.HierarchicalStructureIdParent);
                    if (parent != null)
                        parent.HasChild = parent.Children.Count > 0;
                }

                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                await HandleErrorAsync(ex);
            }
        }
    }

    #region CreateModal

    HierarchyComponentSelectList? hierarchyComponentSelectListRef;
    protected Modal? CreateModal;
    protected Validations? CreateValidationsRef;
    protected HierarchicalStructureDto? NewEntity;

    HierarchyComponentModel hierarchyComponent = new HierarchyComponentModel();

    protected virtual async Task OpenCreateModalAsync(HierarchicalStructureNode? hierarchicalStructureNode)
    {
        try
        {
            if (CreateValidationsRef != null)
            {
                await CreateValidationsRef.ClearAll();
            }

            await AuthorizationService.CheckAsync(NnMgmtAuthorizationPermissions.PrmHierarchicalStructure.Create);

            NewEntity = new HierarchicalStructureDto();
            NewEntity.HierarchicalStructureIdParent = hierarchicalStructureNode?.HierarchicalStructure.Id;

            _selectedHierarchicalStructureNode = hierarchicalStructureNode;

            // Mapper will not notify Blazor that binded values are changed
            // so we need to notify it manually by calling StateHasChanged
            await InvokeAsync(async () =>
            {
                StateHasChanged();
                if (CreateModal != null)
                {
                    await CreateModal.Show();
                }

            });
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    protected virtual async Task CloseCreateModalAsync()
    {
        NewEntity = new HierarchicalStructureDto();
        hierarchyComponentSelectListRef!.Clear();
        await InvokeAsync(CreateModal!.Hide);
    }

    protected virtual async Task CreateEntityAsync()
    {
        try
        {
            var validate = true;
            if (CreateValidationsRef != null)
            {
                validate = await CreateValidationsRef.ValidateAll();
            }
            if (validate)
            {
                await AuthorizationService.CheckAsync(NnMgmtAuthorizationPermissions.PrmHierarchicalStructure.Create);

                NewEntity!.HierarchyId = _selectedHierarchy!.Id;
                NewEntity.HierarchyComponentType = (int)hierarchyComponent.HierarchyComponentType!;
                NewEntity.HierarchyComponentId = (Guid)hierarchyComponent.Id!;

                var entity = await AppService.CreateAsync(NewEntity);

                await OnCreatedEntityAsync(entity);
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    protected virtual async Task OnCreatedEntityAsync(HierarchicalStructureDto entity)
    {
        NewEntity = new HierarchicalStructureDto();
        hierarchyComponentSelectListRef!.Clear();

        entity.HierarchyComponentName = _lHierarchyComponent!.Where(x => x.Id == entity.HierarchyComponentId).First()?.Name;

        if (entity.HierarchicalStructureIdParent == null)
        {
            _lHierarchicalStructureNode.Add(new HierarchicalStructureNode(entity, false));

            await InvokeAsync(CreateModal!.Hide);
            return;
        }

        if (_selectedHierarchicalStructureNode != null)
        {
            _selectedHierarchicalStructureNode.HasChild = true;
            _selectedHierarchicalStructureNode.Children.Add(new HierarchicalStructureNode(entity, false));
        }

        await InvokeAsync(CreateModal!.Hide);
    }

    void ValidateHierarchyComponent(ValidatorEventArgs e)
    {
        e.ErrorText = hierarchyComponent?.HierarchyComponentType == null ? (string.Format(L["The field {0} is required"], L["Hierarchy Component Type"])) :
            hierarchyComponent?.Id == null ? (string.Format(L["The field {0} is required"], L["Hierarchy Component"])) : null;
        e.Status = e.ErrorText == null ? ValidationStatus.None : ValidationStatus.Error;
    }

    private HierarchicalStructureNode? SearchNode(List<HierarchicalStructureNode> lHierarchicalStructureNode, Guid? hierarchicalStructureId)
    {
        foreach (var iHierarchicalStructureNode in lHierarchicalStructureNode)
        {
            if (iHierarchicalStructureNode.HierarchicalStructure.Id == hierarchicalStructureId)
                return iHierarchicalStructureNode;

            var hierarchicalStructureNode = SearchNode(iHierarchicalStructureNode.Children, hierarchicalStructureId);
            if (hierarchicalStructureNode != null)
                return hierarchicalStructureNode;
        }

        return null;
    }

    private bool RemoveNode(List<HierarchicalStructureNode> lHierarchicalStructureNode, Guid hierarchicalStructureId)
    {
        foreach (var iHierarchicalStructureNode in lHierarchicalStructureNode)
        {
            if (iHierarchicalStructureNode.HierarchicalStructure.Id == hierarchicalStructureId)
            {
                lHierarchicalStructureNode.Remove(iHierarchicalStructureNode);
                return true;
            }

            if (RemoveNode(iHierarchicalStructureNode.Children, hierarchicalStructureId))
                return true;
        }

        return false;
    }

    #endregion

}